{
  "parents": [
    "system:cdap-etl-batch[3.3.0-SNAPSHOT,3.5.0-SNAPSHOT)",
    "system:cdap-etl-realtime[3.3.0-SNAPSHOT,3.5.0-SNAPSHOT)"
  ],
  "properties": {
    "widgets.CloneRecord-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Clone Rows\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Copies of record\",\"name\":\"copies\",\"widget-attributes\":{\"width\":\"large\",\"default\":\"1\"}}]}],\"outputs\":[]}",
    "widgets.Compressor-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Compressor\",\"properties\":[{\"widget-type\":\"keyvalue-dropdown\",\"label\":\"Compress Fields\",\"name\":\"compressor\",\"description\":\"List of fields to compress. The key specifies the name of the field to be compressed, with its corresponding value specifying the type of compression that will be applied to it.\",\"widget-attributes\":{\"showDelimiter\":\"false\",\"dropdownOptions\":[\"SNAPPY\",\"ZIP\",\"GZIP\",\"NONE\"]}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"bytes\"],\"schema-default-type\":\"bytes\"}}]}",
    "widgets.CSVFormatter-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"CSV Formatter Configuration\",\"properties\":[{\"widget-type\":\"select\",\"label\":\"Formats\",\"name\":\"format\",\"widget-attributes\":{\"values\":[\"DELIMITED\",\"EXCEL\",\"MYSQL\",\"RFC4180\",\"TDF\"],\"default\":\"DELIMITED\"}},{\"widget-type\":\"select\",\"label\":\"Choose a delimiter\",\"name\":\"delimiter\",\"widget-attributes\":{\"values\":[\"COMMA\",\"CTRL-A\",\"TAB\",\"VBAR\",\"STAR\",\"CARROT\",\"DOLLAR\",\"HASH\",\"CTRL-B\",\"CTRL-C\",\"CTRL-D\",\"CTRL-E\",\"CTRL-F\"],\"default\":\"CTRL-A\"}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"string\"],\"schema-default-type\":\"string\",\"property-watch\":\"format\"}}]}",
    "widgets.CSVParser-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"CSV Parser\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Input field to Parse\",\"name\":\"field\",\"widget-attributes\":{\"width\":\"large\"}},{\"widget-type\":\"select\",\"label\":\"Formats\",\"name\":\"format\",\"widget-attributes\":{\"values\":[\"DEFAULT\",\"EXCEL\",\"MYSQL\",\"RFC4180\",\"PDL\",\"TDF\"],\"default\":\"DEFAULT\"}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"boolean\",\"int\",\"long\",\"float\",\"double\",\"bytes\",\"string\"],\"schema-default-type\":\"string\",\"property-watch\":\"format\"}}]}",
    "widgets.Decoder-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Decoder\",\"properties\":[{\"widget-type\":\"keyvalue-dropdown\",\"label\":\"Decode Fields\",\"name\":\"decode\",\"description\":\"List of fields to decode. The key specifies the name of the field to be decoded, with its corresponding value specifying the type of decoder that will be applied to it.\",\"widget-attributes\":{\"showDelimiter\":\"false\",\"dropdownOptions\":[\"BASE64\",\"BASE32\",\"STRING_BASE64\",\"STRING_BASE32\",\"HEX\",\"NONE\"]}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"string\",\"bytes\"],\"schema-default-type\":\"string\",\"property-watch\":\"format\"}}]}",
    "widgets.Decompressor-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Decompressor\",\"properties\":[{\"widget-type\":\"keyvalue-dropdown\",\"label\":\"Decompress Fields\",\"name\":\"decompressor\",\"description\":\"List of fields to decompress. The key specifies the name of the field to be decompressed, with its corresponding value specifying the type of decompression that will be applied to it.\",\"widget-attributes\":{\"showDelimiter\":\"false\",\"dropdownOptions\":[\"SNAPPY\",\"ZIP\",\"GZIP\",\"NONE\"]}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"bytes\",\"string\"],\"schema-default-type\":\"bytes\",\"property-watch\":\"format\"}}]}",
    "widgets.Encoder-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Encode\",\"properties\":[{\"widget-type\":\"keyvalue-dropdown\",\"label\":\"Encode Fields\",\"name\":\"encode\",\"description\":\"List of fields to encode. The key specifies the name of the field to be encoded, with its corresponding value specifying the type of encoder that will be applied to it.\",\"widget-attributes\":{\"showDelimiter\":\"false\",\"dropdownOptions\":[\"BASE64\",\"BASE32\",\"STRING_BASE64\",\"STRING_BASE32\",\"HEX\",\"NONE\"]}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"string\"],\"schema-default-type\":\"string\",\"property-watch\":\"format\"}}]}",
    "widgets.Hasher-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Hasher Configuration\",\"properties\":[{\"widget-type\":\"select\",\"label\":\"Hasher\",\"name\":\"hash\",\"widget-attributes\":{\"values\":[\"MD2\",\"MD5\",\"SHA1\",\"SHA256\",\"SHA384\",\"SHA512\"],\"default\":\"MD5\"}},{\"widget-type\":\"csv\",\"label\":\"Fields\",\"name\":\"fields\",\"widget-attributes\":{\"delimiter\":\",\"}}]}],\"outputs\":[]}",
    "widgets.JSONFormatter-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"string\"],\"schema-default-type\":\"string\",\"property-watch\":\"format\"}}]}",
    "widgets.JSONParser-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"JSON Parser\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Input field.\",\"name\":\"field\",\"widget-attributes\":{\"width\":\"large\"}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"boolean\",\"int\",\"long\",\"float\",\"double\",\"bytes\",\"string\"],\"schema-default-type\":\"string\",\"property-watch\":\"format\"}}]}",
    "widgets.StreamFormatter-transform": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"properties\":[{\"widget-type\":\"select\",\"label\":\"Format of the body\",\"name\":\"format\",\"widget-attributes\":{\"values\":[\"CSV\",\"TSV\",\"JSON\",\"PSV\"],\"default\":\"CSV\"}}]},{\"properties\":[{\"widget-type\":\"csv\",\"label\":\"Body Fields\",\"name\":\"body\",\"widget-attributes\":{\"delimiter\":\",\"}},{\"widget-type\":\"csv\",\"label\":\"Header Fields\",\"name\":\"header\",\"widget-attributes\":{\"delimiter\":\",\"}}]}],\"outputs\":[{\"name\":\"schema\",\"label\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"string\",\"map<string,string>\"],\"schema-default-type\":\"string\"}}]}",
    "doc.CloneRecord-transform": "# Clone Record Transform\n\n\nDescription\n-----------\nMakes a copy of every input record received for a configured number of times on the output. \nThis transform does not change any record fields or types. It's an identity transform.\n\n\nConfiguration\n-------------\n**copies:** Specifies the numbers of copies of the input record that are to be emitted.\n",
    "doc.Compressor-transform": "# Compressor Transform\n\n\nDescription\n-----------\nCompresses configured fields. Multiple fields can be specified to be compressed using different compression algorithms.\nPlugin supports SNAPPY, ZIP, and GZIP types of compression of fields.\n\n\nConfiguration\n-------------\n**compressor:** Specifies the configuration for compressing fields; in JSON configuration, \nthis is specified as ``<field>:<compressor>[,<field>:<compressor>]*``.\n\n**schema:** Specifies the output schema; the fields that are compressed will have the same field name \nbut they will be of type ``BYTES``.\n",
    "doc.CSVFormatter-transform": "# CSV Formatter Transform\n\n\nDescription\n-----------\nFormats a Structured Record as a CSV Record. Supported CSV Record formats are ``DELIMITED``,\n``EXCEL``, ``MYSQL``, ``RFC4180``, and ``TDF``. When the format is ``DELIMITED``, one can specify different\ndelimiters that a CSV Record should use for separating fields.\n\n\nConfiguration\n-------------\n**format:** Specifies the format of the CSV Record to be generated.\n\n**delimiter:** Specifies the delimiter to be used to generate a CSV Record; \nthis option is available when the format is specified as ``DELIMITED``.\n\n**schema:** Specifies the output schema. Output schema should only have fields of type String.\n",
    "doc.CSVParser-transform": "# CSV Parser Transform\n\n\nDescription\n-----------\nParses an input field as a CSV Record into a Structured Record. Supports multi-line CSV Record parsing\ninto multiple Structured Records. Different formats of CSV Record can be parsed using this plugin.\nSupports these CSV Record types: ``DEFAULT``, ``EXCEL``, ``MYSQL``, ``RFC4180``, and ``TDF``.\n\n\nConfiguration\n-------------\n**format:** Specifies the format of the CSV Record the input should be parsed as.\n\n**field:** Specifies the input field that should be parsed as a CSV Record.\n\n**schema:** Specifies the output schema of the CSV Record.\n",
    "doc.Decoder-transform": "# Decoder Transform\n\n\nDescription\n-----------\nDecodes configured fields. Multiple fields can be specified to be decoded using different decoding methods.\nAvailable decoding methods are ``STRING_BASE64``, ``BASE64``, ``BASE32``, ``STRING_BASE32``, and ``HEX``.\n\n\nConfiguration\n-------------\n**decode:** Specifies the configuration for decode fields; in JSON configuration, \nthis is specified as ``<field>:<decoder>[,<field>:<decoder>]*``.\n\n**schema:** Specifies the output schema; the fields that are decoded will have the same field \nname but they will be of type ``BYTES`` or ``STRING``.\n",
    "doc.Decompressor-transform": "# Decompressor Transform\n\n\nDescription\n-----------\nDecompresses configured fields. Multiple fields can be specified to be decompressed using\ndifferent decompression algorithms. Plugin supports ``SNAPPY``, ``ZIP``, and ``GZIP`` types of\ndecompression of fields.\n\n\nConfiguration\n-------------\n**decompressor:** Specifies the configuration for decompressing fields; in JSON configuration, \nthis is specified as ``<field>:<decompressor>[,<field>:<decompressor>]*``.\n\n**schema:** Specifies the output schema; the fields that are decompressed will have the same field \nname but they will be of type ``BYTES`` or ``STRING``.\n",
    "doc.Encoder-transform": "# Encoder Transform\n\n\nDescription\n-----------\nEncodes configured fields. Multiple fields can be specified to be encoded using different encoding methods.\nAvailable encoding methods are ``STRING_BASE64``, ``BASE64``, ``BASE32``, ``STRING_BASE32``, and ``HEX``.\n\n\nConfiguration\n-------------\n**encode:** Specifies the configuration for encode fields; in JSON configuration, \nthis is specified as ``<field>:<encoder>[,<field>:<encoder>]*``.\n\n**schema:** Specifies the output schema; the fields that are encoded will have the same field name \nbut they will be of type ``BYTES`` or ``STRING``.\n",
    "doc.Hasher-transform": "# Hasher Transform\n\n\nDescription\n-----------\nHashes fields using a digest algorithm such as ``MD2``, ``MD5``, ``SHA1``, ``SHA256``, ``SHA384``, or ``SHA512``.\n\n\nConfiguration\n-------------\n**fields:** Specifies the fields to be hashed.\n\n**hash:** Specifies the hashing algorithm.\n",
    "doc.JSONFormatter-transform": "# JSON Formatter Transform\n\n\nDescription\n-----------\nFormats a Structured Record as JSON Object. Plugin will convert the Structured Record to a\nJSON object and write to the output record. The output record schema is a single field,\neither type ``STRING`` or type ``BYTE`` array.\n\n\nConfiguration\n-------------\n**schema:** Specifies the output schema, a single field either type ``STRING`` or type ``BYTES``.\n",
    "doc.JSONParser-transform": "# JSON Parser Transform\n\n\nDescription\n-----------\nParses an input field value as a JSON Object. Each record in the input is parsed as a JSON Object \nand converted into a Structured Record. The Structured Record can specify particular fields that \nit is interested in, making projections possible.\n\n\nConfiguration\n-------------\n**field:** Specifies the input field that should be parsed as a CSV Record.\n\n**schema:** Specifies the output schema for the JSON Record.\n",
    "doc.StreamFormatter-transform": "# Stream Formatter Transform\n\n\nDescription\n-----------\nFormats a Structured Record as Stream format. Plugin will convert the Structured Record to Stream format.\nIt will include a header and body configurations. The body of the Stream event can be either type ``CSV`` or ``JSON``.\n\n\nConfiguration\n-------------\n**body:** Specifies the input Structured Record fields that should be included in the body of the Stream event.\n\n**header:** Specifies the input Structured Record fields that should be included in the header of the Stream event.\n\n**format:** Specifies the format of the body. Currently supported formats are ``JSON``, ``CSV``, ``TSV``, and ``PSV``.\n\n**schema:** Specifies the output schema; the output schema can have only two fields: one of type ``STRING`` \nand the other of type ``MAP<STRING, STRING>``.\n"
  }
}